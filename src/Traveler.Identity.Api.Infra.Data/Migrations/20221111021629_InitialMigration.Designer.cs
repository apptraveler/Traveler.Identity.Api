// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Traveler.Identity.Api.Infra.Data.Context;

#nullable disable

namespace Traveler.Identity.Api.Infra.Data.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20221111021629_InitialMigration")]
    partial class InitialMigration
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "6.0.5");

            modelBuilder.Entity("Traveler.Identity.Api.Domain.Aggregates.TravelerAggregate.Traveler", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<int?>("AverageSpendId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("AverageSpendId");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT")
                        .HasColumnName("CreatedAt");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("Email");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("FullName");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("Password");

                    b.Property<Guid?>("ProfileId")
                        .HasColumnType("TEXT")
                        .HasColumnName("ProfileId");

                    b.Property<byte[]>("Salt")
                        .IsRequired()
                        .HasColumnType("BLOB")
                        .HasColumnName("Salt");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("TEXT")
                        .HasColumnName("UpdatedAt");

                    b.HasKey("Id");

                    b.HasIndex("AverageSpendId");

                    b.HasIndex("ProfileId");

                    b.ToTable("Traveler", (string)null);
                });

            modelBuilder.Entity("Traveler.Identity.Api.Domain.Aggregates.TravelerAggregate.TravelerAverageSpend", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("Name");

                    b.HasKey("Id");

                    b.ToTable("TravelerAverageSpend", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Baixo"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Médio"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Alto"
                        });
                });

            modelBuilder.Entity("Traveler.Identity.Api.Domain.Aggregates.TravelerLocationAggregate.TravelerLocation", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<int>("LocationId")
                        .HasColumnType("INTEGER");

                    b.Property<Guid>("TravelerId")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("LocationId");

                    b.HasIndex("TravelerId");

                    b.ToTable("TravelerLocation", (string)null);
                });

            modelBuilder.Entity("Traveler.Identity.Api.Domain.Aggregates.TravelerLocationAggregate.TravelerLocationTags", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("Name");

                    b.HasKey("Id");

                    b.ToTable("TravelerLocationTags", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Montanhas"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Praias"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Cachoeiras"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Trilhas"
                        },
                        new
                        {
                            Id = 5,
                            Name = "Pontos Turísticos"
                        },
                        new
                        {
                            Id = 6,
                            Name = "Lugares Históricos"
                        });
                });

            modelBuilder.Entity("Traveler.Identity.Api.Domain.Aggregates.TravelerProfileAggregate.TravelerProfile", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("Description");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("Name");

                    b.HasKey("Id");

                    b.ToTable("TravelerProfile", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("b509f797-f903-4bae-a09d-4b237713f5e7"),
                            Description = "Para o perfil mochileiro o que importa é a jornada e as experiências adquiridas, o destino é apenas uma consequência.",
                            Name = "Mochileiro"
                        },
                        new
                        {
                            Id = new Guid("0309de4d-3ca2-4ba6-abcd-655d71709785"),
                            Description = "Você gosta de aproveitar tudo que o destino têm a oferecer, pontos turísticos, culinária, museus, parques, arquitetura e todo o resto.",
                            Name = "Turista"
                        },
                        new
                        {
                            Id = new Guid("bfd66e39-6350-4778-866c-02c41cf177a7"),
                            Description = "O perfil fotógrafo gosta de tirar fotos de tudo que vê pela frente, registrar os momentos é o que é importante, detalhes pra você são a chave.",
                            Name = "Fotógrafo"
                        },
                        new
                        {
                            Id = new Guid("ecdcd222-b1e0-4299-b8bd-05fd8be1012d"),
                            Description = "Economia é tudo! Você quer aproveitar ao máximo gastando o menos possível, custo benefício é o seu foco.",
                            Name = "Econômico"
                        },
                        new
                        {
                            Id = new Guid("10e60d29-0848-4208-a723-ea157e5a13e3"),
                            Description = "Profundo, aprimorar o auto-conhecimento por meio de novas culturas, ensinamentos e buscar a paz interior é o seu foco.",
                            Name = "Auto Conhecedor"
                        },
                        new
                        {
                            Id = new Guid("83ffa673-96a7-4bf6-89c4-b86948ce5871"),
                            Description = "Viajar para conhecer novas pessoas, curtir com os amigos, família, é o seu objetivo, o que importa é estar perto de pessoas interessantes.",
                            Name = "Social"
                        });
                });

            modelBuilder.Entity("Traveler.Identity.Api.Domain.Aggregates.TravelerAggregate.Traveler", b =>
                {
                    b.HasOne("Traveler.Identity.Api.Domain.Aggregates.TravelerAggregate.TravelerAverageSpend", "AverageSpend")
                        .WithMany()
                        .HasForeignKey("AverageSpendId");

                    b.HasOne("Traveler.Identity.Api.Domain.Aggregates.TravelerProfileAggregate.TravelerProfile", "Profile")
                        .WithMany()
                        .HasForeignKey("ProfileId");

                    b.Navigation("AverageSpend");

                    b.Navigation("Profile");
                });

            modelBuilder.Entity("Traveler.Identity.Api.Domain.Aggregates.TravelerLocationAggregate.TravelerLocation", b =>
                {
                    b.HasOne("Traveler.Identity.Api.Domain.Aggregates.TravelerLocationAggregate.TravelerLocationTags", null)
                        .WithMany()
                        .HasForeignKey("LocationId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Traveler.Identity.Api.Domain.Aggregates.TravelerAggregate.Traveler", null)
                        .WithMany()
                        .HasForeignKey("TravelerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
